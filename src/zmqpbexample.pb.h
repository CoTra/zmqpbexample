// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zmqpbexample.proto

#ifndef PROTOBUF_zmqpbexample_2eproto__INCLUDED
#define PROTOBUF_zmqpbexample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_zmqpbexample_2eproto();
void protobuf_AssignDesc_zmqpbexample_2eproto();
void protobuf_ShutdownFile_zmqpbexample_2eproto();

class ZmqPBExampleRequest;
class ZmqPBExampleResponse;
class ZmqPBExampleRPCRequest;
class ZmqPBExampleRPCResponse;
class RPCAddRequest;
class RPCAddResponse;
class RPCReverseRequest;
class RPCReverseResponse;
class ZmqPBExampleWeather;

enum RPCError {
  NO_SERVICE = 1,
  NO_METHOD = 2,
  BAD_REQUEST = 3
};
bool RPCError_IsValid(int value);
const RPCError RPCError_MIN = NO_SERVICE;
const RPCError RPCError_MAX = BAD_REQUEST;
const int RPCError_ARRAYSIZE = RPCError_MAX + 1;

const ::google::protobuf::EnumDescriptor* RPCError_descriptor();
inline const ::std::string& RPCError_Name(RPCError value) {
  return ::google::protobuf::internal::NameOfEnum(
    RPCError_descriptor(), value);
}
inline bool RPCError_Parse(
    const ::std::string& name, RPCError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RPCError>(
    RPCError_descriptor(), name, value);
}
// ===================================================================

class ZmqPBExampleRequest : public ::google::protobuf::Message {
 public:
  ZmqPBExampleRequest();
  virtual ~ZmqPBExampleRequest();
  
  ZmqPBExampleRequest(const ZmqPBExampleRequest& from);
  
  inline ZmqPBExampleRequest& operator=(const ZmqPBExampleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZmqPBExampleRequest& default_instance();
  
  void Swap(ZmqPBExampleRequest* other);
  
  // implements Message ----------------------------------------------
  
  ZmqPBExampleRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZmqPBExampleRequest& from);
  void MergeFrom(const ZmqPBExampleRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string request_string = 1;
  inline bool has_request_string() const;
  inline void clear_request_string();
  static const int kRequestStringFieldNumber = 1;
  inline const ::std::string& request_string() const;
  inline void set_request_string(const ::std::string& value);
  inline void set_request_string(const char* value);
  inline void set_request_string(const char* value, size_t size);
  inline ::std::string* mutable_request_string();
  inline ::std::string* release_request_string();
  
  // required int32 request_number = 2;
  inline bool has_request_number() const;
  inline void clear_request_number();
  static const int kRequestNumberFieldNumber = 2;
  inline ::google::protobuf::int32 request_number() const;
  inline void set_request_number(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ZmqPBExampleRequest)
 private:
  inline void set_has_request_string();
  inline void clear_has_request_string();
  inline void set_has_request_number();
  inline void clear_has_request_number();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* request_string_;
  ::google::protobuf::int32 request_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static ZmqPBExampleRequest* default_instance_;
};
// -------------------------------------------------------------------

class ZmqPBExampleResponse : public ::google::protobuf::Message {
 public:
  ZmqPBExampleResponse();
  virtual ~ZmqPBExampleResponse();
  
  ZmqPBExampleResponse(const ZmqPBExampleResponse& from);
  
  inline ZmqPBExampleResponse& operator=(const ZmqPBExampleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZmqPBExampleResponse& default_instance();
  
  void Swap(ZmqPBExampleResponse* other);
  
  // implements Message ----------------------------------------------
  
  ZmqPBExampleResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZmqPBExampleResponse& from);
  void MergeFrom(const ZmqPBExampleResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string response_string = 1;
  inline bool has_response_string() const;
  inline void clear_response_string();
  static const int kResponseStringFieldNumber = 1;
  inline const ::std::string& response_string() const;
  inline void set_response_string(const ::std::string& value);
  inline void set_response_string(const char* value);
  inline void set_response_string(const char* value, size_t size);
  inline ::std::string* mutable_response_string();
  inline ::std::string* release_response_string();
  
  // required int32 response_number = 2;
  inline bool has_response_number() const;
  inline void clear_response_number();
  static const int kResponseNumberFieldNumber = 2;
  inline ::google::protobuf::int32 response_number() const;
  inline void set_response_number(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ZmqPBExampleResponse)
 private:
  inline void set_has_response_string();
  inline void clear_has_response_string();
  inline void set_has_response_number();
  inline void clear_has_response_number();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* response_string_;
  ::google::protobuf::int32 response_number_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static ZmqPBExampleResponse* default_instance_;
};
// -------------------------------------------------------------------

class ZmqPBExampleRPCRequest : public ::google::protobuf::Message {
 public:
  ZmqPBExampleRPCRequest();
  virtual ~ZmqPBExampleRPCRequest();
  
  ZmqPBExampleRPCRequest(const ZmqPBExampleRPCRequest& from);
  
  inline ZmqPBExampleRPCRequest& operator=(const ZmqPBExampleRPCRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZmqPBExampleRPCRequest& default_instance();
  
  void Swap(ZmqPBExampleRPCRequest* other);
  
  // implements Message ----------------------------------------------
  
  ZmqPBExampleRPCRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZmqPBExampleRPCRequest& from);
  void MergeFrom(const ZmqPBExampleRPCRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string service = 1;
  inline bool has_service() const;
  inline void clear_service();
  static const int kServiceFieldNumber = 1;
  inline const ::std::string& service() const;
  inline void set_service(const ::std::string& value);
  inline void set_service(const char* value);
  inline void set_service(const char* value, size_t size);
  inline ::std::string* mutable_service();
  inline ::std::string* release_service();
  
  // required string method = 2;
  inline bool has_method() const;
  inline void clear_method();
  static const int kMethodFieldNumber = 2;
  inline const ::std::string& method() const;
  inline void set_method(const ::std::string& value);
  inline void set_method(const char* value);
  inline void set_method(const char* value, size_t size);
  inline ::std::string* mutable_method();
  inline ::std::string* release_method();
  
  // required bytes protobuf = 3;
  inline bool has_protobuf() const;
  inline void clear_protobuf();
  static const int kProtobufFieldNumber = 3;
  inline const ::std::string& protobuf() const;
  inline void set_protobuf(const ::std::string& value);
  inline void set_protobuf(const char* value);
  inline void set_protobuf(const void* value, size_t size);
  inline ::std::string* mutable_protobuf();
  inline ::std::string* release_protobuf();
  
  // @@protoc_insertion_point(class_scope:ZmqPBExampleRPCRequest)
 private:
  inline void set_has_service();
  inline void clear_has_service();
  inline void set_has_method();
  inline void clear_has_method();
  inline void set_has_protobuf();
  inline void clear_has_protobuf();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* service_;
  ::std::string* method_;
  ::std::string* protobuf_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static ZmqPBExampleRPCRequest* default_instance_;
};
// -------------------------------------------------------------------

class ZmqPBExampleRPCResponse : public ::google::protobuf::Message {
 public:
  ZmqPBExampleRPCResponse();
  virtual ~ZmqPBExampleRPCResponse();
  
  ZmqPBExampleRPCResponse(const ZmqPBExampleRPCResponse& from);
  
  inline ZmqPBExampleRPCResponse& operator=(const ZmqPBExampleRPCResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZmqPBExampleRPCResponse& default_instance();
  
  void Swap(ZmqPBExampleRPCResponse* other);
  
  // implements Message ----------------------------------------------
  
  ZmqPBExampleRPCResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZmqPBExampleRPCResponse& from);
  void MergeFrom(const ZmqPBExampleRPCResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional bytes protobuf = 1;
  inline bool has_protobuf() const;
  inline void clear_protobuf();
  static const int kProtobufFieldNumber = 1;
  inline const ::std::string& protobuf() const;
  inline void set_protobuf(const ::std::string& value);
  inline void set_protobuf(const char* value);
  inline void set_protobuf(const void* value, size_t size);
  inline ::std::string* mutable_protobuf();
  inline ::std::string* release_protobuf();
  
  // optional string error = 2;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 2;
  inline const ::std::string& error() const;
  inline void set_error(const ::std::string& value);
  inline void set_error(const char* value);
  inline void set_error(const char* value, size_t size);
  inline ::std::string* mutable_error();
  inline ::std::string* release_error();
  
  // @@protoc_insertion_point(class_scope:ZmqPBExampleRPCResponse)
 private:
  inline void set_has_protobuf();
  inline void clear_has_protobuf();
  inline void set_has_error();
  inline void clear_has_error();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* protobuf_;
  ::std::string* error_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static ZmqPBExampleRPCResponse* default_instance_;
};
// -------------------------------------------------------------------

class RPCAddRequest : public ::google::protobuf::Message {
 public:
  RPCAddRequest();
  virtual ~RPCAddRequest();
  
  RPCAddRequest(const RPCAddRequest& from);
  
  inline RPCAddRequest& operator=(const RPCAddRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCAddRequest& default_instance();
  
  void Swap(RPCAddRequest* other);
  
  // implements Message ----------------------------------------------
  
  RPCAddRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCAddRequest& from);
  void MergeFrom(const RPCAddRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 term1 = 1;
  inline bool has_term1() const;
  inline void clear_term1();
  static const int kTerm1FieldNumber = 1;
  inline ::google::protobuf::uint32 term1() const;
  inline void set_term1(::google::protobuf::uint32 value);
  
  // required uint32 term2 = 2;
  inline bool has_term2() const;
  inline void clear_term2();
  static const int kTerm2FieldNumber = 2;
  inline ::google::protobuf::uint32 term2() const;
  inline void set_term2(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RPCAddRequest)
 private:
  inline void set_has_term1();
  inline void clear_has_term1();
  inline void set_has_term2();
  inline void clear_has_term2();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 term1_;
  ::google::protobuf::uint32 term2_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static RPCAddRequest* default_instance_;
};
// -------------------------------------------------------------------

class RPCAddResponse : public ::google::protobuf::Message {
 public:
  RPCAddResponse();
  virtual ~RPCAddResponse();
  
  RPCAddResponse(const RPCAddResponse& from);
  
  inline RPCAddResponse& operator=(const RPCAddResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCAddResponse& default_instance();
  
  void Swap(RPCAddResponse* other);
  
  // implements Message ----------------------------------------------
  
  RPCAddResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCAddResponse& from);
  void MergeFrom(const RPCAddResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 sum = 1;
  inline bool has_sum() const;
  inline void clear_sum();
  static const int kSumFieldNumber = 1;
  inline ::google::protobuf::uint32 sum() const;
  inline void set_sum(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:RPCAddResponse)
 private:
  inline void set_has_sum();
  inline void clear_has_sum();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 sum_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static RPCAddResponse* default_instance_;
};
// -------------------------------------------------------------------

class RPCReverseRequest : public ::google::protobuf::Message {
 public:
  RPCReverseRequest();
  virtual ~RPCReverseRequest();
  
  RPCReverseRequest(const RPCReverseRequest& from);
  
  inline RPCReverseRequest& operator=(const RPCReverseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCReverseRequest& default_instance();
  
  void Swap(RPCReverseRequest* other);
  
  // implements Message ----------------------------------------------
  
  RPCReverseRequest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCReverseRequest& from);
  void MergeFrom(const RPCReverseRequest& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string to_reverse = 1;
  inline bool has_to_reverse() const;
  inline void clear_to_reverse();
  static const int kToReverseFieldNumber = 1;
  inline const ::std::string& to_reverse() const;
  inline void set_to_reverse(const ::std::string& value);
  inline void set_to_reverse(const char* value);
  inline void set_to_reverse(const char* value, size_t size);
  inline ::std::string* mutable_to_reverse();
  inline ::std::string* release_to_reverse();
  
  // @@protoc_insertion_point(class_scope:RPCReverseRequest)
 private:
  inline void set_has_to_reverse();
  inline void clear_has_to_reverse();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* to_reverse_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static RPCReverseRequest* default_instance_;
};
// -------------------------------------------------------------------

class RPCReverseResponse : public ::google::protobuf::Message {
 public:
  RPCReverseResponse();
  virtual ~RPCReverseResponse();
  
  RPCReverseResponse(const RPCReverseResponse& from);
  
  inline RPCReverseResponse& operator=(const RPCReverseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const RPCReverseResponse& default_instance();
  
  void Swap(RPCReverseResponse* other);
  
  // implements Message ----------------------------------------------
  
  RPCReverseResponse* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RPCReverseResponse& from);
  void MergeFrom(const RPCReverseResponse& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string reversed = 1;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 1;
  inline const ::std::string& reversed() const;
  inline void set_reversed(const ::std::string& value);
  inline void set_reversed(const char* value);
  inline void set_reversed(const char* value, size_t size);
  inline ::std::string* mutable_reversed();
  inline ::std::string* release_reversed();
  
  // @@protoc_insertion_point(class_scope:RPCReverseResponse)
 private:
  inline void set_has_reversed();
  inline void clear_has_reversed();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* reversed_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static RPCReverseResponse* default_instance_;
};
// -------------------------------------------------------------------

class ZmqPBExampleWeather : public ::google::protobuf::Message {
 public:
  ZmqPBExampleWeather();
  virtual ~ZmqPBExampleWeather();
  
  ZmqPBExampleWeather(const ZmqPBExampleWeather& from);
  
  inline ZmqPBExampleWeather& operator=(const ZmqPBExampleWeather& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const ZmqPBExampleWeather& default_instance();
  
  void Swap(ZmqPBExampleWeather* other);
  
  // implements Message ----------------------------------------------
  
  ZmqPBExampleWeather* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZmqPBExampleWeather& from);
  void MergeFrom(const ZmqPBExampleWeather& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint32 zipcode = 1;
  inline bool has_zipcode() const;
  inline void clear_zipcode();
  static const int kZipcodeFieldNumber = 1;
  inline ::google::protobuf::uint32 zipcode() const;
  inline void set_zipcode(::google::protobuf::uint32 value);
  
  // required uint32 temperature = 2;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 2;
  inline ::google::protobuf::uint32 temperature() const;
  inline void set_temperature(::google::protobuf::uint32 value);
  
  // required uint32 relhumidity = 3;
  inline bool has_relhumidity() const;
  inline void clear_relhumidity();
  static const int kRelhumidityFieldNumber = 3;
  inline ::google::protobuf::uint32 relhumidity() const;
  inline void set_relhumidity(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:ZmqPBExampleWeather)
 private:
  inline void set_has_zipcode();
  inline void clear_has_zipcode();
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_relhumidity();
  inline void clear_has_relhumidity();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint32 zipcode_;
  ::google::protobuf::uint32 temperature_;
  ::google::protobuf::uint32 relhumidity_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_zmqpbexample_2eproto();
  friend void protobuf_AssignDesc_zmqpbexample_2eproto();
  friend void protobuf_ShutdownFile_zmqpbexample_2eproto();
  
  void InitAsDefaultInstance();
  static ZmqPBExampleWeather* default_instance_;
};
// ===================================================================


// ===================================================================

// ZmqPBExampleRequest

// required string request_string = 1;
inline bool ZmqPBExampleRequest::has_request_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZmqPBExampleRequest::set_has_request_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZmqPBExampleRequest::clear_has_request_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZmqPBExampleRequest::clear_request_string() {
  if (request_string_ != &::google::protobuf::internal::kEmptyString) {
    request_string_->clear();
  }
  clear_has_request_string();
}
inline const ::std::string& ZmqPBExampleRequest::request_string() const {
  return *request_string_;
}
inline void ZmqPBExampleRequest::set_request_string(const ::std::string& value) {
  set_has_request_string();
  if (request_string_ == &::google::protobuf::internal::kEmptyString) {
    request_string_ = new ::std::string;
  }
  request_string_->assign(value);
}
inline void ZmqPBExampleRequest::set_request_string(const char* value) {
  set_has_request_string();
  if (request_string_ == &::google::protobuf::internal::kEmptyString) {
    request_string_ = new ::std::string;
  }
  request_string_->assign(value);
}
inline void ZmqPBExampleRequest::set_request_string(const char* value, size_t size) {
  set_has_request_string();
  if (request_string_ == &::google::protobuf::internal::kEmptyString) {
    request_string_ = new ::std::string;
  }
  request_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZmqPBExampleRequest::mutable_request_string() {
  set_has_request_string();
  if (request_string_ == &::google::protobuf::internal::kEmptyString) {
    request_string_ = new ::std::string;
  }
  return request_string_;
}
inline ::std::string* ZmqPBExampleRequest::release_request_string() {
  clear_has_request_string();
  if (request_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = request_string_;
    request_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 request_number = 2;
inline bool ZmqPBExampleRequest::has_request_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZmqPBExampleRequest::set_has_request_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZmqPBExampleRequest::clear_has_request_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZmqPBExampleRequest::clear_request_number() {
  request_number_ = 0;
  clear_has_request_number();
}
inline ::google::protobuf::int32 ZmqPBExampleRequest::request_number() const {
  return request_number_;
}
inline void ZmqPBExampleRequest::set_request_number(::google::protobuf::int32 value) {
  set_has_request_number();
  request_number_ = value;
}

// -------------------------------------------------------------------

// ZmqPBExampleResponse

// required string response_string = 1;
inline bool ZmqPBExampleResponse::has_response_string() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZmqPBExampleResponse::set_has_response_string() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZmqPBExampleResponse::clear_has_response_string() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZmqPBExampleResponse::clear_response_string() {
  if (response_string_ != &::google::protobuf::internal::kEmptyString) {
    response_string_->clear();
  }
  clear_has_response_string();
}
inline const ::std::string& ZmqPBExampleResponse::response_string() const {
  return *response_string_;
}
inline void ZmqPBExampleResponse::set_response_string(const ::std::string& value) {
  set_has_response_string();
  if (response_string_ == &::google::protobuf::internal::kEmptyString) {
    response_string_ = new ::std::string;
  }
  response_string_->assign(value);
}
inline void ZmqPBExampleResponse::set_response_string(const char* value) {
  set_has_response_string();
  if (response_string_ == &::google::protobuf::internal::kEmptyString) {
    response_string_ = new ::std::string;
  }
  response_string_->assign(value);
}
inline void ZmqPBExampleResponse::set_response_string(const char* value, size_t size) {
  set_has_response_string();
  if (response_string_ == &::google::protobuf::internal::kEmptyString) {
    response_string_ = new ::std::string;
  }
  response_string_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZmqPBExampleResponse::mutable_response_string() {
  set_has_response_string();
  if (response_string_ == &::google::protobuf::internal::kEmptyString) {
    response_string_ = new ::std::string;
  }
  return response_string_;
}
inline ::std::string* ZmqPBExampleResponse::release_response_string() {
  clear_has_response_string();
  if (response_string_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = response_string_;
    response_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required int32 response_number = 2;
inline bool ZmqPBExampleResponse::has_response_number() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZmqPBExampleResponse::set_has_response_number() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZmqPBExampleResponse::clear_has_response_number() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZmqPBExampleResponse::clear_response_number() {
  response_number_ = 0;
  clear_has_response_number();
}
inline ::google::protobuf::int32 ZmqPBExampleResponse::response_number() const {
  return response_number_;
}
inline void ZmqPBExampleResponse::set_response_number(::google::protobuf::int32 value) {
  set_has_response_number();
  response_number_ = value;
}

// -------------------------------------------------------------------

// ZmqPBExampleRPCRequest

// required string service = 1;
inline bool ZmqPBExampleRPCRequest::has_service() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZmqPBExampleRPCRequest::set_has_service() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZmqPBExampleRPCRequest::clear_has_service() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZmqPBExampleRPCRequest::clear_service() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    service_->clear();
  }
  clear_has_service();
}
inline const ::std::string& ZmqPBExampleRPCRequest::service() const {
  return *service_;
}
inline void ZmqPBExampleRPCRequest::set_service(const ::std::string& value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void ZmqPBExampleRPCRequest::set_service(const char* value) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(value);
}
inline void ZmqPBExampleRPCRequest::set_service(const char* value, size_t size) {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  service_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZmqPBExampleRPCRequest::mutable_service() {
  set_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    service_ = new ::std::string;
  }
  return service_;
}
inline ::std::string* ZmqPBExampleRPCRequest::release_service() {
  clear_has_service();
  if (service_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = service_;
    service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string method = 2;
inline bool ZmqPBExampleRPCRequest::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZmqPBExampleRPCRequest::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZmqPBExampleRPCRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZmqPBExampleRPCRequest::clear_method() {
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    method_->clear();
  }
  clear_has_method();
}
inline const ::std::string& ZmqPBExampleRPCRequest::method() const {
  return *method_;
}
inline void ZmqPBExampleRPCRequest::set_method(const ::std::string& value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void ZmqPBExampleRPCRequest::set_method(const char* value) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(value);
}
inline void ZmqPBExampleRPCRequest::set_method(const char* value, size_t size) {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  method_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZmqPBExampleRPCRequest::mutable_method() {
  set_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    method_ = new ::std::string;
  }
  return method_;
}
inline ::std::string* ZmqPBExampleRPCRequest::release_method() {
  clear_has_method();
  if (method_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = method_;
    method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required bytes protobuf = 3;
inline bool ZmqPBExampleRPCRequest::has_protobuf() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZmqPBExampleRPCRequest::set_has_protobuf() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZmqPBExampleRPCRequest::clear_has_protobuf() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZmqPBExampleRPCRequest::clear_protobuf() {
  if (protobuf_ != &::google::protobuf::internal::kEmptyString) {
    protobuf_->clear();
  }
  clear_has_protobuf();
}
inline const ::std::string& ZmqPBExampleRPCRequest::protobuf() const {
  return *protobuf_;
}
inline void ZmqPBExampleRPCRequest::set_protobuf(const ::std::string& value) {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  protobuf_->assign(value);
}
inline void ZmqPBExampleRPCRequest::set_protobuf(const char* value) {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  protobuf_->assign(value);
}
inline void ZmqPBExampleRPCRequest::set_protobuf(const void* value, size_t size) {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  protobuf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZmqPBExampleRPCRequest::mutable_protobuf() {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  return protobuf_;
}
inline ::std::string* ZmqPBExampleRPCRequest::release_protobuf() {
  clear_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = protobuf_;
    protobuf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ZmqPBExampleRPCResponse

// optional bytes protobuf = 1;
inline bool ZmqPBExampleRPCResponse::has_protobuf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZmqPBExampleRPCResponse::set_has_protobuf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZmqPBExampleRPCResponse::clear_has_protobuf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZmqPBExampleRPCResponse::clear_protobuf() {
  if (protobuf_ != &::google::protobuf::internal::kEmptyString) {
    protobuf_->clear();
  }
  clear_has_protobuf();
}
inline const ::std::string& ZmqPBExampleRPCResponse::protobuf() const {
  return *protobuf_;
}
inline void ZmqPBExampleRPCResponse::set_protobuf(const ::std::string& value) {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  protobuf_->assign(value);
}
inline void ZmqPBExampleRPCResponse::set_protobuf(const char* value) {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  protobuf_->assign(value);
}
inline void ZmqPBExampleRPCResponse::set_protobuf(const void* value, size_t size) {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  protobuf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZmqPBExampleRPCResponse::mutable_protobuf() {
  set_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    protobuf_ = new ::std::string;
  }
  return protobuf_;
}
inline ::std::string* ZmqPBExampleRPCResponse::release_protobuf() {
  clear_has_protobuf();
  if (protobuf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = protobuf_;
    protobuf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// optional string error = 2;
inline bool ZmqPBExampleRPCResponse::has_error() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZmqPBExampleRPCResponse::set_has_error() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZmqPBExampleRPCResponse::clear_has_error() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZmqPBExampleRPCResponse::clear_error() {
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    error_->clear();
  }
  clear_has_error();
}
inline const ::std::string& ZmqPBExampleRPCResponse::error() const {
  return *error_;
}
inline void ZmqPBExampleRPCResponse::set_error(const ::std::string& value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void ZmqPBExampleRPCResponse::set_error(const char* value) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(value);
}
inline void ZmqPBExampleRPCResponse::set_error(const char* value, size_t size) {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  error_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ZmqPBExampleRPCResponse::mutable_error() {
  set_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    error_ = new ::std::string;
  }
  return error_;
}
inline ::std::string* ZmqPBExampleRPCResponse::release_error() {
  clear_has_error();
  if (error_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = error_;
    error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RPCAddRequest

// required uint32 term1 = 1;
inline bool RPCAddRequest::has_term1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCAddRequest::set_has_term1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCAddRequest::clear_has_term1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCAddRequest::clear_term1() {
  term1_ = 0u;
  clear_has_term1();
}
inline ::google::protobuf::uint32 RPCAddRequest::term1() const {
  return term1_;
}
inline void RPCAddRequest::set_term1(::google::protobuf::uint32 value) {
  set_has_term1();
  term1_ = value;
}

// required uint32 term2 = 2;
inline bool RPCAddRequest::has_term2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RPCAddRequest::set_has_term2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RPCAddRequest::clear_has_term2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RPCAddRequest::clear_term2() {
  term2_ = 0u;
  clear_has_term2();
}
inline ::google::protobuf::uint32 RPCAddRequest::term2() const {
  return term2_;
}
inline void RPCAddRequest::set_term2(::google::protobuf::uint32 value) {
  set_has_term2();
  term2_ = value;
}

// -------------------------------------------------------------------

// RPCAddResponse

// required uint32 sum = 1;
inline bool RPCAddResponse::has_sum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCAddResponse::set_has_sum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCAddResponse::clear_has_sum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCAddResponse::clear_sum() {
  sum_ = 0u;
  clear_has_sum();
}
inline ::google::protobuf::uint32 RPCAddResponse::sum() const {
  return sum_;
}
inline void RPCAddResponse::set_sum(::google::protobuf::uint32 value) {
  set_has_sum();
  sum_ = value;
}

// -------------------------------------------------------------------

// RPCReverseRequest

// required string to_reverse = 1;
inline bool RPCReverseRequest::has_to_reverse() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCReverseRequest::set_has_to_reverse() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCReverseRequest::clear_has_to_reverse() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCReverseRequest::clear_to_reverse() {
  if (to_reverse_ != &::google::protobuf::internal::kEmptyString) {
    to_reverse_->clear();
  }
  clear_has_to_reverse();
}
inline const ::std::string& RPCReverseRequest::to_reverse() const {
  return *to_reverse_;
}
inline void RPCReverseRequest::set_to_reverse(const ::std::string& value) {
  set_has_to_reverse();
  if (to_reverse_ == &::google::protobuf::internal::kEmptyString) {
    to_reverse_ = new ::std::string;
  }
  to_reverse_->assign(value);
}
inline void RPCReverseRequest::set_to_reverse(const char* value) {
  set_has_to_reverse();
  if (to_reverse_ == &::google::protobuf::internal::kEmptyString) {
    to_reverse_ = new ::std::string;
  }
  to_reverse_->assign(value);
}
inline void RPCReverseRequest::set_to_reverse(const char* value, size_t size) {
  set_has_to_reverse();
  if (to_reverse_ == &::google::protobuf::internal::kEmptyString) {
    to_reverse_ = new ::std::string;
  }
  to_reverse_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCReverseRequest::mutable_to_reverse() {
  set_has_to_reverse();
  if (to_reverse_ == &::google::protobuf::internal::kEmptyString) {
    to_reverse_ = new ::std::string;
  }
  return to_reverse_;
}
inline ::std::string* RPCReverseRequest::release_to_reverse() {
  clear_has_to_reverse();
  if (to_reverse_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = to_reverse_;
    to_reverse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// RPCReverseResponse

// required string reversed = 1;
inline bool RPCReverseResponse::has_reversed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RPCReverseResponse::set_has_reversed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RPCReverseResponse::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RPCReverseResponse::clear_reversed() {
  if (reversed_ != &::google::protobuf::internal::kEmptyString) {
    reversed_->clear();
  }
  clear_has_reversed();
}
inline const ::std::string& RPCReverseResponse::reversed() const {
  return *reversed_;
}
inline void RPCReverseResponse::set_reversed(const ::std::string& value) {
  set_has_reversed();
  if (reversed_ == &::google::protobuf::internal::kEmptyString) {
    reversed_ = new ::std::string;
  }
  reversed_->assign(value);
}
inline void RPCReverseResponse::set_reversed(const char* value) {
  set_has_reversed();
  if (reversed_ == &::google::protobuf::internal::kEmptyString) {
    reversed_ = new ::std::string;
  }
  reversed_->assign(value);
}
inline void RPCReverseResponse::set_reversed(const char* value, size_t size) {
  set_has_reversed();
  if (reversed_ == &::google::protobuf::internal::kEmptyString) {
    reversed_ = new ::std::string;
  }
  reversed_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RPCReverseResponse::mutable_reversed() {
  set_has_reversed();
  if (reversed_ == &::google::protobuf::internal::kEmptyString) {
    reversed_ = new ::std::string;
  }
  return reversed_;
}
inline ::std::string* RPCReverseResponse::release_reversed() {
  clear_has_reversed();
  if (reversed_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reversed_;
    reversed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// ZmqPBExampleWeather

// required uint32 zipcode = 1;
inline bool ZmqPBExampleWeather::has_zipcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZmqPBExampleWeather::set_has_zipcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZmqPBExampleWeather::clear_has_zipcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZmqPBExampleWeather::clear_zipcode() {
  zipcode_ = 0u;
  clear_has_zipcode();
}
inline ::google::protobuf::uint32 ZmqPBExampleWeather::zipcode() const {
  return zipcode_;
}
inline void ZmqPBExampleWeather::set_zipcode(::google::protobuf::uint32 value) {
  set_has_zipcode();
  zipcode_ = value;
}

// required uint32 temperature = 2;
inline bool ZmqPBExampleWeather::has_temperature() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZmqPBExampleWeather::set_has_temperature() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZmqPBExampleWeather::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZmqPBExampleWeather::clear_temperature() {
  temperature_ = 0u;
  clear_has_temperature();
}
inline ::google::protobuf::uint32 ZmqPBExampleWeather::temperature() const {
  return temperature_;
}
inline void ZmqPBExampleWeather::set_temperature(::google::protobuf::uint32 value) {
  set_has_temperature();
  temperature_ = value;
}

// required uint32 relhumidity = 3;
inline bool ZmqPBExampleWeather::has_relhumidity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZmqPBExampleWeather::set_has_relhumidity() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZmqPBExampleWeather::clear_has_relhumidity() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZmqPBExampleWeather::clear_relhumidity() {
  relhumidity_ = 0u;
  clear_has_relhumidity();
}
inline ::google::protobuf::uint32 ZmqPBExampleWeather::relhumidity() const {
  return relhumidity_;
}
inline void ZmqPBExampleWeather::set_relhumidity(::google::protobuf::uint32 value) {
  set_has_relhumidity();
  relhumidity_ = value;
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< RPCError>() {
  return RPCError_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zmqpbexample_2eproto__INCLUDED
