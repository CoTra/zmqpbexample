// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zmqpbexample.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ZmqPBExampleRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZmqPBExampleRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZmqPBExampleResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZmqPBExampleResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZmqPBExampleRPCRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZmqPBExampleRPCRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZmqPBExampleRPCResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZmqPBExampleRPCResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPCAddRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCAddRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPCAddResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCAddResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPCReverseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCReverseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RPCReverseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RPCReverseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZmqPBExampleWeather_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZmqPBExampleWeather_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZmqPBExampleWorkerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZmqPBExampleWorkerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZmqPBExampleWorkerResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZmqPBExampleWorkerResponse_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* RPCError_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_zmqpbexample_2eproto() {
  protobuf_AddDesc_zmqpbexample_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "zmqpbexample.proto");
  GOOGLE_CHECK(file != NULL);
  ZmqPBExampleRequest_descriptor_ = file->message_type(0);
  static const int ZmqPBExampleRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRequest, request_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRequest, request_number_),
  };
  ZmqPBExampleRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZmqPBExampleRequest_descriptor_,
      ZmqPBExampleRequest::default_instance_,
      ZmqPBExampleRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZmqPBExampleRequest));
  ZmqPBExampleResponse_descriptor_ = file->message_type(1);
  static const int ZmqPBExampleResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleResponse, response_string_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleResponse, response_number_),
  };
  ZmqPBExampleResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZmqPBExampleResponse_descriptor_,
      ZmqPBExampleResponse::default_instance_,
      ZmqPBExampleResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZmqPBExampleResponse));
  ZmqPBExampleRPCRequest_descriptor_ = file->message_type(2);
  static const int ZmqPBExampleRPCRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCRequest, service_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCRequest, protobuf_),
  };
  ZmqPBExampleRPCRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZmqPBExampleRPCRequest_descriptor_,
      ZmqPBExampleRPCRequest::default_instance_,
      ZmqPBExampleRPCRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZmqPBExampleRPCRequest));
  ZmqPBExampleRPCResponse_descriptor_ = file->message_type(3);
  static const int ZmqPBExampleRPCResponse_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCResponse, protobuf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCResponse, error_),
  };
  ZmqPBExampleRPCResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZmqPBExampleRPCResponse_descriptor_,
      ZmqPBExampleRPCResponse::default_instance_,
      ZmqPBExampleRPCResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleRPCResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZmqPBExampleRPCResponse));
  RPCAddRequest_descriptor_ = file->message_type(4);
  static const int RPCAddRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCAddRequest, term1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCAddRequest, term2_),
  };
  RPCAddRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCAddRequest_descriptor_,
      RPCAddRequest::default_instance_,
      RPCAddRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCAddRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCAddRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCAddRequest));
  RPCAddResponse_descriptor_ = file->message_type(5);
  static const int RPCAddResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCAddResponse, sum_),
  };
  RPCAddResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCAddResponse_descriptor_,
      RPCAddResponse::default_instance_,
      RPCAddResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCAddResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCAddResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCAddResponse));
  RPCReverseRequest_descriptor_ = file->message_type(6);
  static const int RPCReverseRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCReverseRequest, to_reverse_),
  };
  RPCReverseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCReverseRequest_descriptor_,
      RPCReverseRequest::default_instance_,
      RPCReverseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCReverseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCReverseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCReverseRequest));
  RPCReverseResponse_descriptor_ = file->message_type(7);
  static const int RPCReverseResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCReverseResponse, reversed_),
  };
  RPCReverseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RPCReverseResponse_descriptor_,
      RPCReverseResponse::default_instance_,
      RPCReverseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCReverseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RPCReverseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RPCReverseResponse));
  ZmqPBExampleWeather_descriptor_ = file->message_type(8);
  static const int ZmqPBExampleWeather_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWeather, zipcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWeather, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWeather, relhumidity_),
  };
  ZmqPBExampleWeather_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZmqPBExampleWeather_descriptor_,
      ZmqPBExampleWeather::default_instance_,
      ZmqPBExampleWeather_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWeather, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWeather, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZmqPBExampleWeather));
  ZmqPBExampleWorkerRequest_descriptor_ = file->message_type(9);
  static const int ZmqPBExampleWorkerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWorkerRequest, string_in_),
  };
  ZmqPBExampleWorkerRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZmqPBExampleWorkerRequest_descriptor_,
      ZmqPBExampleWorkerRequest::default_instance_,
      ZmqPBExampleWorkerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWorkerRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWorkerRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZmqPBExampleWorkerRequest));
  ZmqPBExampleWorkerResponse_descriptor_ = file->message_type(10);
  static const int ZmqPBExampleWorkerResponse_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWorkerResponse, string_out_),
  };
  ZmqPBExampleWorkerResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZmqPBExampleWorkerResponse_descriptor_,
      ZmqPBExampleWorkerResponse::default_instance_,
      ZmqPBExampleWorkerResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWorkerResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZmqPBExampleWorkerResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZmqPBExampleWorkerResponse));
  RPCError_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_zmqpbexample_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZmqPBExampleRequest_descriptor_, &ZmqPBExampleRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZmqPBExampleResponse_descriptor_, &ZmqPBExampleResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZmqPBExampleRPCRequest_descriptor_, &ZmqPBExampleRPCRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZmqPBExampleRPCResponse_descriptor_, &ZmqPBExampleRPCResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCAddRequest_descriptor_, &RPCAddRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCAddResponse_descriptor_, &RPCAddResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCReverseRequest_descriptor_, &RPCReverseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RPCReverseResponse_descriptor_, &RPCReverseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZmqPBExampleWeather_descriptor_, &ZmqPBExampleWeather::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZmqPBExampleWorkerRequest_descriptor_, &ZmqPBExampleWorkerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZmqPBExampleWorkerResponse_descriptor_, &ZmqPBExampleWorkerResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_zmqpbexample_2eproto() {
  delete ZmqPBExampleRequest::default_instance_;
  delete ZmqPBExampleRequest_reflection_;
  delete ZmqPBExampleResponse::default_instance_;
  delete ZmqPBExampleResponse_reflection_;
  delete ZmqPBExampleRPCRequest::default_instance_;
  delete ZmqPBExampleRPCRequest_reflection_;
  delete ZmqPBExampleRPCResponse::default_instance_;
  delete ZmqPBExampleRPCResponse_reflection_;
  delete RPCAddRequest::default_instance_;
  delete RPCAddRequest_reflection_;
  delete RPCAddResponse::default_instance_;
  delete RPCAddResponse_reflection_;
  delete RPCReverseRequest::default_instance_;
  delete RPCReverseRequest_reflection_;
  delete RPCReverseResponse::default_instance_;
  delete RPCReverseResponse_reflection_;
  delete ZmqPBExampleWeather::default_instance_;
  delete ZmqPBExampleWeather_reflection_;
  delete ZmqPBExampleWorkerRequest::default_instance_;
  delete ZmqPBExampleWorkerRequest_reflection_;
  delete ZmqPBExampleWorkerResponse::default_instance_;
  delete ZmqPBExampleWorkerResponse_reflection_;
}

void protobuf_AddDesc_zmqpbexample_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022zmqpbexample.proto\"E\n\023ZmqPBExampleRequ"
    "est\022\026\n\016request_string\030\001 \002(\t\022\026\n\016request_n"
    "umber\030\002 \002(\005\"H\n\024ZmqPBExampleResponse\022\027\n\017r"
    "esponse_string\030\001 \002(\t\022\027\n\017response_number\030"
    "\002 \002(\005\"K\n\026ZmqPBExampleRPCRequest\022\017\n\007servi"
    "ce\030\001 \002(\t\022\016\n\006method\030\002 \002(\t\022\020\n\010protobuf\030\003 \002"
    "(\014\":\n\027ZmqPBExampleRPCResponse\022\020\n\010protobu"
    "f\030\001 \001(\014\022\r\n\005error\030\002 \001(\t\"-\n\rRPCAddRequest\022"
    "\r\n\005term1\030\001 \002(\r\022\r\n\005term2\030\002 \002(\r\"\035\n\016RPCAddR"
    "esponse\022\013\n\003sum\030\001 \002(\r\"\'\n\021RPCReverseReques"
    "t\022\022\n\nto_reverse\030\001 \002(\t\"&\n\022RPCReverseRespo"
    "nse\022\020\n\010reversed\030\001 \002(\t\"P\n\023ZmqPBExampleWea"
    "ther\022\017\n\007zipcode\030\001 \002(\r\022\023\n\013temperature\030\002 \002"
    "(\r\022\023\n\013relhumidity\030\003 \002(\r\".\n\031ZmqPBExampleW"
    "orkerRequest\022\021\n\tstring_in\030\001 \002(\t\"0\n\032ZmqPB"
    "ExampleWorkerResponse\022\022\n\nstring_out\030\001 \002("
    "\t*:\n\010RPCError\022\016\n\nNO_SERVICE\020\001\022\r\n\tNO_METH"
    "OD\020\002\022\017\n\013BAD_REQUEST\020\003", 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zmqpbexample.proto", &protobuf_RegisterTypes);
  ZmqPBExampleRequest::default_instance_ = new ZmqPBExampleRequest();
  ZmqPBExampleResponse::default_instance_ = new ZmqPBExampleResponse();
  ZmqPBExampleRPCRequest::default_instance_ = new ZmqPBExampleRPCRequest();
  ZmqPBExampleRPCResponse::default_instance_ = new ZmqPBExampleRPCResponse();
  RPCAddRequest::default_instance_ = new RPCAddRequest();
  RPCAddResponse::default_instance_ = new RPCAddResponse();
  RPCReverseRequest::default_instance_ = new RPCReverseRequest();
  RPCReverseResponse::default_instance_ = new RPCReverseResponse();
  ZmqPBExampleWeather::default_instance_ = new ZmqPBExampleWeather();
  ZmqPBExampleWorkerRequest::default_instance_ = new ZmqPBExampleWorkerRequest();
  ZmqPBExampleWorkerResponse::default_instance_ = new ZmqPBExampleWorkerResponse();
  ZmqPBExampleRequest::default_instance_->InitAsDefaultInstance();
  ZmqPBExampleResponse::default_instance_->InitAsDefaultInstance();
  ZmqPBExampleRPCRequest::default_instance_->InitAsDefaultInstance();
  ZmqPBExampleRPCResponse::default_instance_->InitAsDefaultInstance();
  RPCAddRequest::default_instance_->InitAsDefaultInstance();
  RPCAddResponse::default_instance_->InitAsDefaultInstance();
  RPCReverseRequest::default_instance_->InitAsDefaultInstance();
  RPCReverseResponse::default_instance_->InitAsDefaultInstance();
  ZmqPBExampleWeather::default_instance_->InitAsDefaultInstance();
  ZmqPBExampleWorkerRequest::default_instance_->InitAsDefaultInstance();
  ZmqPBExampleWorkerResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_zmqpbexample_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_zmqpbexample_2eproto {
  StaticDescriptorInitializer_zmqpbexample_2eproto() {
    protobuf_AddDesc_zmqpbexample_2eproto();
  }
} static_descriptor_initializer_zmqpbexample_2eproto_;

const ::google::protobuf::EnumDescriptor* RPCError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCError_descriptor_;
}
bool RPCError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int ZmqPBExampleRequest::kRequestStringFieldNumber;
const int ZmqPBExampleRequest::kRequestNumberFieldNumber;
#endif  // !_MSC_VER

ZmqPBExampleRequest::ZmqPBExampleRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZmqPBExampleRequest::InitAsDefaultInstance() {
}

ZmqPBExampleRequest::ZmqPBExampleRequest(const ZmqPBExampleRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZmqPBExampleRequest::SharedCtor() {
  _cached_size_ = 0;
  request_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  request_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZmqPBExampleRequest::~ZmqPBExampleRequest() {
  SharedDtor();
}

void ZmqPBExampleRequest::SharedDtor() {
  if (request_string_ != &::google::protobuf::internal::kEmptyString) {
    delete request_string_;
  }
  if (this != default_instance_) {
  }
}

void ZmqPBExampleRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZmqPBExampleRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZmqPBExampleRequest_descriptor_;
}

const ZmqPBExampleRequest& ZmqPBExampleRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

ZmqPBExampleRequest* ZmqPBExampleRequest::default_instance_ = NULL;

ZmqPBExampleRequest* ZmqPBExampleRequest::New() const {
  return new ZmqPBExampleRequest;
}

void ZmqPBExampleRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_request_string()) {
      if (request_string_ != &::google::protobuf::internal::kEmptyString) {
        request_string_->clear();
      }
    }
    request_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZmqPBExampleRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string request_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->request_string().data(), this->request_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_request_number;
        break;
      }
      
      // required int32 request_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_request_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_number_)));
          set_has_request_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZmqPBExampleRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string request_string = 1;
  if (has_request_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_string().data(), this->request_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->request_string(), output);
  }
  
  // required int32 request_number = 2;
  if (has_request_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->request_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZmqPBExampleRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string request_string = 1;
  if (has_request_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->request_string().data(), this->request_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->request_string(), target);
  }
  
  // required int32 request_number = 2;
  if (has_request_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->request_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZmqPBExampleRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string request_string = 1;
    if (has_request_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->request_string());
    }
    
    // required int32 request_number = 2;
    if (has_request_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->request_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZmqPBExampleRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZmqPBExampleRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZmqPBExampleRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZmqPBExampleRequest::MergeFrom(const ZmqPBExampleRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_request_string()) {
      set_request_string(from.request_string());
    }
    if (from.has_request_number()) {
      set_request_number(from.request_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZmqPBExampleRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmqPBExampleRequest::CopyFrom(const ZmqPBExampleRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmqPBExampleRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ZmqPBExampleRequest::Swap(ZmqPBExampleRequest* other) {
  if (other != this) {
    std::swap(request_string_, other->request_string_);
    std::swap(request_number_, other->request_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZmqPBExampleRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZmqPBExampleRequest_descriptor_;
  metadata.reflection = ZmqPBExampleRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZmqPBExampleResponse::kResponseStringFieldNumber;
const int ZmqPBExampleResponse::kResponseNumberFieldNumber;
#endif  // !_MSC_VER

ZmqPBExampleResponse::ZmqPBExampleResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZmqPBExampleResponse::InitAsDefaultInstance() {
}

ZmqPBExampleResponse::ZmqPBExampleResponse(const ZmqPBExampleResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZmqPBExampleResponse::SharedCtor() {
  _cached_size_ = 0;
  response_string_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  response_number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZmqPBExampleResponse::~ZmqPBExampleResponse() {
  SharedDtor();
}

void ZmqPBExampleResponse::SharedDtor() {
  if (response_string_ != &::google::protobuf::internal::kEmptyString) {
    delete response_string_;
  }
  if (this != default_instance_) {
  }
}

void ZmqPBExampleResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZmqPBExampleResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZmqPBExampleResponse_descriptor_;
}

const ZmqPBExampleResponse& ZmqPBExampleResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

ZmqPBExampleResponse* ZmqPBExampleResponse::default_instance_ = NULL;

ZmqPBExampleResponse* ZmqPBExampleResponse::New() const {
  return new ZmqPBExampleResponse;
}

void ZmqPBExampleResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_response_string()) {
      if (response_string_ != &::google::protobuf::internal::kEmptyString) {
        response_string_->clear();
      }
    }
    response_number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZmqPBExampleResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string response_string = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_string()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->response_string().data(), this->response_string().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_response_number;
        break;
      }
      
      // required int32 response_number = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_response_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &response_number_)));
          set_has_response_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZmqPBExampleResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string response_string = 1;
  if (has_response_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_string().data(), this->response_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->response_string(), output);
  }
  
  // required int32 response_number = 2;
  if (has_response_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->response_number(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZmqPBExampleResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string response_string = 1;
  if (has_response_string()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->response_string().data(), this->response_string().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->response_string(), target);
  }
  
  // required int32 response_number = 2;
  if (has_response_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->response_number(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZmqPBExampleResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string response_string = 1;
    if (has_response_string()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->response_string());
    }
    
    // required int32 response_number = 2;
    if (has_response_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->response_number());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZmqPBExampleResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZmqPBExampleResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZmqPBExampleResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZmqPBExampleResponse::MergeFrom(const ZmqPBExampleResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_response_string()) {
      set_response_string(from.response_string());
    }
    if (from.has_response_number()) {
      set_response_number(from.response_number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZmqPBExampleResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmqPBExampleResponse::CopyFrom(const ZmqPBExampleResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmqPBExampleResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void ZmqPBExampleResponse::Swap(ZmqPBExampleResponse* other) {
  if (other != this) {
    std::swap(response_string_, other->response_string_);
    std::swap(response_number_, other->response_number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZmqPBExampleResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZmqPBExampleResponse_descriptor_;
  metadata.reflection = ZmqPBExampleResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZmqPBExampleRPCRequest::kServiceFieldNumber;
const int ZmqPBExampleRPCRequest::kMethodFieldNumber;
const int ZmqPBExampleRPCRequest::kProtobufFieldNumber;
#endif  // !_MSC_VER

ZmqPBExampleRPCRequest::ZmqPBExampleRPCRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZmqPBExampleRPCRequest::InitAsDefaultInstance() {
}

ZmqPBExampleRPCRequest::ZmqPBExampleRPCRequest(const ZmqPBExampleRPCRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZmqPBExampleRPCRequest::SharedCtor() {
  _cached_size_ = 0;
  service_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  method_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  protobuf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZmqPBExampleRPCRequest::~ZmqPBExampleRPCRequest() {
  SharedDtor();
}

void ZmqPBExampleRPCRequest::SharedDtor() {
  if (service_ != &::google::protobuf::internal::kEmptyString) {
    delete service_;
  }
  if (method_ != &::google::protobuf::internal::kEmptyString) {
    delete method_;
  }
  if (protobuf_ != &::google::protobuf::internal::kEmptyString) {
    delete protobuf_;
  }
  if (this != default_instance_) {
  }
}

void ZmqPBExampleRPCRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZmqPBExampleRPCRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZmqPBExampleRPCRequest_descriptor_;
}

const ZmqPBExampleRPCRequest& ZmqPBExampleRPCRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

ZmqPBExampleRPCRequest* ZmqPBExampleRPCRequest::default_instance_ = NULL;

ZmqPBExampleRPCRequest* ZmqPBExampleRPCRequest::New() const {
  return new ZmqPBExampleRPCRequest;
}

void ZmqPBExampleRPCRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_service()) {
      if (service_ != &::google::protobuf::internal::kEmptyString) {
        service_->clear();
      }
    }
    if (has_method()) {
      if (method_ != &::google::protobuf::internal::kEmptyString) {
        method_->clear();
      }
    }
    if (has_protobuf()) {
      if (protobuf_ != &::google::protobuf::internal::kEmptyString) {
        protobuf_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZmqPBExampleRPCRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string service = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_service()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->service().data(), this->service().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }
      
      // required string method = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_protobuf;
        break;
      }
      
      // required bytes protobuf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protobuf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protobuf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZmqPBExampleRPCRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->service(), output);
  }
  
  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->method(), output);
  }
  
  // required bytes protobuf = 3;
  if (has_protobuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->protobuf(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZmqPBExampleRPCRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string service = 1;
  if (has_service()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->service().data(), this->service().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->service(), target);
  }
  
  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }
  
  // required bytes protobuf = 3;
  if (has_protobuf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->protobuf(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZmqPBExampleRPCRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string service = 1;
    if (has_service()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->service());
    }
    
    // required string method = 2;
    if (has_method()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->method());
    }
    
    // required bytes protobuf = 3;
    if (has_protobuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protobuf());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZmqPBExampleRPCRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZmqPBExampleRPCRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZmqPBExampleRPCRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZmqPBExampleRPCRequest::MergeFrom(const ZmqPBExampleRPCRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_service()) {
      set_service(from.service());
    }
    if (from.has_method()) {
      set_method(from.method());
    }
    if (from.has_protobuf()) {
      set_protobuf(from.protobuf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZmqPBExampleRPCRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmqPBExampleRPCRequest::CopyFrom(const ZmqPBExampleRPCRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmqPBExampleRPCRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ZmqPBExampleRPCRequest::Swap(ZmqPBExampleRPCRequest* other) {
  if (other != this) {
    std::swap(service_, other->service_);
    std::swap(method_, other->method_);
    std::swap(protobuf_, other->protobuf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZmqPBExampleRPCRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZmqPBExampleRPCRequest_descriptor_;
  metadata.reflection = ZmqPBExampleRPCRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZmqPBExampleRPCResponse::kProtobufFieldNumber;
const int ZmqPBExampleRPCResponse::kErrorFieldNumber;
#endif  // !_MSC_VER

ZmqPBExampleRPCResponse::ZmqPBExampleRPCResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZmqPBExampleRPCResponse::InitAsDefaultInstance() {
}

ZmqPBExampleRPCResponse::ZmqPBExampleRPCResponse(const ZmqPBExampleRPCResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZmqPBExampleRPCResponse::SharedCtor() {
  _cached_size_ = 0;
  protobuf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  error_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZmqPBExampleRPCResponse::~ZmqPBExampleRPCResponse() {
  SharedDtor();
}

void ZmqPBExampleRPCResponse::SharedDtor() {
  if (protobuf_ != &::google::protobuf::internal::kEmptyString) {
    delete protobuf_;
  }
  if (error_ != &::google::protobuf::internal::kEmptyString) {
    delete error_;
  }
  if (this != default_instance_) {
  }
}

void ZmqPBExampleRPCResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZmqPBExampleRPCResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZmqPBExampleRPCResponse_descriptor_;
}

const ZmqPBExampleRPCResponse& ZmqPBExampleRPCResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

ZmqPBExampleRPCResponse* ZmqPBExampleRPCResponse::default_instance_ = NULL;

ZmqPBExampleRPCResponse* ZmqPBExampleRPCResponse::New() const {
  return new ZmqPBExampleRPCResponse;
}

void ZmqPBExampleRPCResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_protobuf()) {
      if (protobuf_ != &::google::protobuf::internal::kEmptyString) {
        protobuf_->clear();
      }
    }
    if (has_error()) {
      if (error_ != &::google::protobuf::internal::kEmptyString) {
        error_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZmqPBExampleRPCResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes protobuf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_protobuf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }
      
      // optional string error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_error()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->error().data(), this->error().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZmqPBExampleRPCResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes protobuf = 1;
  if (has_protobuf()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->protobuf(), output);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->error(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZmqPBExampleRPCResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes protobuf = 1;
  if (has_protobuf()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->protobuf(), target);
  }
  
  // optional string error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->error().data(), this->error().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->error(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZmqPBExampleRPCResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes protobuf = 1;
    if (has_protobuf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->protobuf());
    }
    
    // optional string error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->error());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZmqPBExampleRPCResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZmqPBExampleRPCResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZmqPBExampleRPCResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZmqPBExampleRPCResponse::MergeFrom(const ZmqPBExampleRPCResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_protobuf()) {
      set_protobuf(from.protobuf());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZmqPBExampleRPCResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmqPBExampleRPCResponse::CopyFrom(const ZmqPBExampleRPCResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmqPBExampleRPCResponse::IsInitialized() const {
  
  return true;
}

void ZmqPBExampleRPCResponse::Swap(ZmqPBExampleRPCResponse* other) {
  if (other != this) {
    std::swap(protobuf_, other->protobuf_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZmqPBExampleRPCResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZmqPBExampleRPCResponse_descriptor_;
  metadata.reflection = ZmqPBExampleRPCResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPCAddRequest::kTerm1FieldNumber;
const int RPCAddRequest::kTerm2FieldNumber;
#endif  // !_MSC_VER

RPCAddRequest::RPCAddRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCAddRequest::InitAsDefaultInstance() {
}

RPCAddRequest::RPCAddRequest(const RPCAddRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCAddRequest::SharedCtor() {
  _cached_size_ = 0;
  term1_ = 0u;
  term2_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCAddRequest::~RPCAddRequest() {
  SharedDtor();
}

void RPCAddRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RPCAddRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCAddRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCAddRequest_descriptor_;
}

const RPCAddRequest& RPCAddRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

RPCAddRequest* RPCAddRequest::default_instance_ = NULL;

RPCAddRequest* RPCAddRequest::New() const {
  return new RPCAddRequest;
}

void RPCAddRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    term1_ = 0u;
    term2_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCAddRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 term1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &term1_)));
          set_has_term1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_term2;
        break;
      }
      
      // required uint32 term2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_term2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &term2_)));
          set_has_term2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCAddRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 term1 = 1;
  if (has_term1()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->term1(), output);
  }
  
  // required uint32 term2 = 2;
  if (has_term2()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->term2(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCAddRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 term1 = 1;
  if (has_term1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->term1(), target);
  }
  
  // required uint32 term2 = 2;
  if (has_term2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->term2(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCAddRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 term1 = 1;
    if (has_term1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->term1());
    }
    
    // required uint32 term2 = 2;
    if (has_term2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->term2());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCAddRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCAddRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCAddRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCAddRequest::MergeFrom(const RPCAddRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_term1()) {
      set_term1(from.term1());
    }
    if (from.has_term2()) {
      set_term2(from.term2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCAddRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCAddRequest::CopyFrom(const RPCAddRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCAddRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void RPCAddRequest::Swap(RPCAddRequest* other) {
  if (other != this) {
    std::swap(term1_, other->term1_);
    std::swap(term2_, other->term2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCAddRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCAddRequest_descriptor_;
  metadata.reflection = RPCAddRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPCAddResponse::kSumFieldNumber;
#endif  // !_MSC_VER

RPCAddResponse::RPCAddResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCAddResponse::InitAsDefaultInstance() {
}

RPCAddResponse::RPCAddResponse(const RPCAddResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCAddResponse::SharedCtor() {
  _cached_size_ = 0;
  sum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCAddResponse::~RPCAddResponse() {
  SharedDtor();
}

void RPCAddResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RPCAddResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCAddResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCAddResponse_descriptor_;
}

const RPCAddResponse& RPCAddResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

RPCAddResponse* RPCAddResponse::default_instance_ = NULL;

RPCAddResponse* RPCAddResponse::New() const {
  return new RPCAddResponse;
}

void RPCAddResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCAddResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sum_)));
          set_has_sum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCAddResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 sum = 1;
  if (has_sum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sum(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCAddResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 sum = 1;
  if (has_sum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sum(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCAddResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sum = 1;
    if (has_sum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sum());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCAddResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCAddResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCAddResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCAddResponse::MergeFrom(const RPCAddResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sum()) {
      set_sum(from.sum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCAddResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCAddResponse::CopyFrom(const RPCAddResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCAddResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RPCAddResponse::Swap(RPCAddResponse* other) {
  if (other != this) {
    std::swap(sum_, other->sum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCAddResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCAddResponse_descriptor_;
  metadata.reflection = RPCAddResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPCReverseRequest::kToReverseFieldNumber;
#endif  // !_MSC_VER

RPCReverseRequest::RPCReverseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCReverseRequest::InitAsDefaultInstance() {
}

RPCReverseRequest::RPCReverseRequest(const RPCReverseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCReverseRequest::SharedCtor() {
  _cached_size_ = 0;
  to_reverse_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCReverseRequest::~RPCReverseRequest() {
  SharedDtor();
}

void RPCReverseRequest::SharedDtor() {
  if (to_reverse_ != &::google::protobuf::internal::kEmptyString) {
    delete to_reverse_;
  }
  if (this != default_instance_) {
  }
}

void RPCReverseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCReverseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCReverseRequest_descriptor_;
}

const RPCReverseRequest& RPCReverseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

RPCReverseRequest* RPCReverseRequest::default_instance_ = NULL;

RPCReverseRequest* RPCReverseRequest::New() const {
  return new RPCReverseRequest;
}

void RPCReverseRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_to_reverse()) {
      if (to_reverse_ != &::google::protobuf::internal::kEmptyString) {
        to_reverse_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCReverseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string to_reverse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_to_reverse()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->to_reverse().data(), this->to_reverse().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCReverseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string to_reverse = 1;
  if (has_to_reverse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_reverse().data(), this->to_reverse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->to_reverse(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCReverseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string to_reverse = 1;
  if (has_to_reverse()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->to_reverse().data(), this->to_reverse().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->to_reverse(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCReverseRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string to_reverse = 1;
    if (has_to_reverse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->to_reverse());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCReverseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCReverseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCReverseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCReverseRequest::MergeFrom(const RPCReverseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to_reverse()) {
      set_to_reverse(from.to_reverse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCReverseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCReverseRequest::CopyFrom(const RPCReverseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCReverseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RPCReverseRequest::Swap(RPCReverseRequest* other) {
  if (other != this) {
    std::swap(to_reverse_, other->to_reverse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCReverseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCReverseRequest_descriptor_;
  metadata.reflection = RPCReverseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RPCReverseResponse::kReversedFieldNumber;
#endif  // !_MSC_VER

RPCReverseResponse::RPCReverseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RPCReverseResponse::InitAsDefaultInstance() {
}

RPCReverseResponse::RPCReverseResponse(const RPCReverseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RPCReverseResponse::SharedCtor() {
  _cached_size_ = 0;
  reversed_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RPCReverseResponse::~RPCReverseResponse() {
  SharedDtor();
}

void RPCReverseResponse::SharedDtor() {
  if (reversed_ != &::google::protobuf::internal::kEmptyString) {
    delete reversed_;
  }
  if (this != default_instance_) {
  }
}

void RPCReverseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RPCReverseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RPCReverseResponse_descriptor_;
}

const RPCReverseResponse& RPCReverseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

RPCReverseResponse* RPCReverseResponse::default_instance_ = NULL;

RPCReverseResponse* RPCReverseResponse::New() const {
  return new RPCReverseResponse;
}

void RPCReverseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_reversed()) {
      if (reversed_ != &::google::protobuf::internal::kEmptyString) {
        reversed_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RPCReverseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string reversed = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reversed()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reversed().data(), this->reversed().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RPCReverseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string reversed = 1;
  if (has_reversed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reversed().data(), this->reversed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->reversed(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RPCReverseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string reversed = 1;
  if (has_reversed()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reversed().data(), this->reversed().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->reversed(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RPCReverseResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string reversed = 1;
    if (has_reversed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reversed());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RPCReverseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RPCReverseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RPCReverseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RPCReverseResponse::MergeFrom(const RPCReverseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reversed()) {
      set_reversed(from.reversed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RPCReverseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RPCReverseResponse::CopyFrom(const RPCReverseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RPCReverseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void RPCReverseResponse::Swap(RPCReverseResponse* other) {
  if (other != this) {
    std::swap(reversed_, other->reversed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RPCReverseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RPCReverseResponse_descriptor_;
  metadata.reflection = RPCReverseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZmqPBExampleWeather::kZipcodeFieldNumber;
const int ZmqPBExampleWeather::kTemperatureFieldNumber;
const int ZmqPBExampleWeather::kRelhumidityFieldNumber;
#endif  // !_MSC_VER

ZmqPBExampleWeather::ZmqPBExampleWeather()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZmqPBExampleWeather::InitAsDefaultInstance() {
}

ZmqPBExampleWeather::ZmqPBExampleWeather(const ZmqPBExampleWeather& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZmqPBExampleWeather::SharedCtor() {
  _cached_size_ = 0;
  zipcode_ = 0u;
  temperature_ = 0u;
  relhumidity_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZmqPBExampleWeather::~ZmqPBExampleWeather() {
  SharedDtor();
}

void ZmqPBExampleWeather::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZmqPBExampleWeather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZmqPBExampleWeather::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZmqPBExampleWeather_descriptor_;
}

const ZmqPBExampleWeather& ZmqPBExampleWeather::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

ZmqPBExampleWeather* ZmqPBExampleWeather::default_instance_ = NULL;

ZmqPBExampleWeather* ZmqPBExampleWeather::New() const {
  return new ZmqPBExampleWeather;
}

void ZmqPBExampleWeather::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    zipcode_ = 0u;
    temperature_ = 0u;
    relhumidity_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZmqPBExampleWeather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 zipcode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zipcode_)));
          set_has_zipcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_temperature;
        break;
      }
      
      // required uint32 temperature = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_temperature:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_relhumidity;
        break;
      }
      
      // required uint32 relhumidity = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relhumidity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &relhumidity_)));
          set_has_relhumidity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZmqPBExampleWeather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 zipcode = 1;
  if (has_zipcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->zipcode(), output);
  }
  
  // required uint32 temperature = 2;
  if (has_temperature()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->temperature(), output);
  }
  
  // required uint32 relhumidity = 3;
  if (has_relhumidity()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->relhumidity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZmqPBExampleWeather::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 zipcode = 1;
  if (has_zipcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->zipcode(), target);
  }
  
  // required uint32 temperature = 2;
  if (has_temperature()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->temperature(), target);
  }
  
  // required uint32 relhumidity = 3;
  if (has_relhumidity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->relhumidity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZmqPBExampleWeather::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 zipcode = 1;
    if (has_zipcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zipcode());
    }
    
    // required uint32 temperature = 2;
    if (has_temperature()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->temperature());
    }
    
    // required uint32 relhumidity = 3;
    if (has_relhumidity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->relhumidity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZmqPBExampleWeather::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZmqPBExampleWeather* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZmqPBExampleWeather*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZmqPBExampleWeather::MergeFrom(const ZmqPBExampleWeather& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zipcode()) {
      set_zipcode(from.zipcode());
    }
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_relhumidity()) {
      set_relhumidity(from.relhumidity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZmqPBExampleWeather::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmqPBExampleWeather::CopyFrom(const ZmqPBExampleWeather& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmqPBExampleWeather::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void ZmqPBExampleWeather::Swap(ZmqPBExampleWeather* other) {
  if (other != this) {
    std::swap(zipcode_, other->zipcode_);
    std::swap(temperature_, other->temperature_);
    std::swap(relhumidity_, other->relhumidity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZmqPBExampleWeather::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZmqPBExampleWeather_descriptor_;
  metadata.reflection = ZmqPBExampleWeather_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZmqPBExampleWorkerRequest::kStringInFieldNumber;
#endif  // !_MSC_VER

ZmqPBExampleWorkerRequest::ZmqPBExampleWorkerRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZmqPBExampleWorkerRequest::InitAsDefaultInstance() {
}

ZmqPBExampleWorkerRequest::ZmqPBExampleWorkerRequest(const ZmqPBExampleWorkerRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZmqPBExampleWorkerRequest::SharedCtor() {
  _cached_size_ = 0;
  string_in_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZmqPBExampleWorkerRequest::~ZmqPBExampleWorkerRequest() {
  SharedDtor();
}

void ZmqPBExampleWorkerRequest::SharedDtor() {
  if (string_in_ != &::google::protobuf::internal::kEmptyString) {
    delete string_in_;
  }
  if (this != default_instance_) {
  }
}

void ZmqPBExampleWorkerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZmqPBExampleWorkerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZmqPBExampleWorkerRequest_descriptor_;
}

const ZmqPBExampleWorkerRequest& ZmqPBExampleWorkerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

ZmqPBExampleWorkerRequest* ZmqPBExampleWorkerRequest::default_instance_ = NULL;

ZmqPBExampleWorkerRequest* ZmqPBExampleWorkerRequest::New() const {
  return new ZmqPBExampleWorkerRequest;
}

void ZmqPBExampleWorkerRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_in()) {
      if (string_in_ != &::google::protobuf::internal::kEmptyString) {
        string_in_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZmqPBExampleWorkerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string string_in = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_in()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_in().data(), this->string_in().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZmqPBExampleWorkerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string string_in = 1;
  if (has_string_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_in().data(), this->string_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string_in(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZmqPBExampleWorkerRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string string_in = 1;
  if (has_string_in()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_in().data(), this->string_in().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_in(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZmqPBExampleWorkerRequest::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string string_in = 1;
    if (has_string_in()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_in());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZmqPBExampleWorkerRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZmqPBExampleWorkerRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZmqPBExampleWorkerRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZmqPBExampleWorkerRequest::MergeFrom(const ZmqPBExampleWorkerRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_in()) {
      set_string_in(from.string_in());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZmqPBExampleWorkerRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmqPBExampleWorkerRequest::CopyFrom(const ZmqPBExampleWorkerRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmqPBExampleWorkerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ZmqPBExampleWorkerRequest::Swap(ZmqPBExampleWorkerRequest* other) {
  if (other != this) {
    std::swap(string_in_, other->string_in_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZmqPBExampleWorkerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZmqPBExampleWorkerRequest_descriptor_;
  metadata.reflection = ZmqPBExampleWorkerRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZmqPBExampleWorkerResponse::kStringOutFieldNumber;
#endif  // !_MSC_VER

ZmqPBExampleWorkerResponse::ZmqPBExampleWorkerResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ZmqPBExampleWorkerResponse::InitAsDefaultInstance() {
}

ZmqPBExampleWorkerResponse::ZmqPBExampleWorkerResponse(const ZmqPBExampleWorkerResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ZmqPBExampleWorkerResponse::SharedCtor() {
  _cached_size_ = 0;
  string_out_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZmqPBExampleWorkerResponse::~ZmqPBExampleWorkerResponse() {
  SharedDtor();
}

void ZmqPBExampleWorkerResponse::SharedDtor() {
  if (string_out_ != &::google::protobuf::internal::kEmptyString) {
    delete string_out_;
  }
  if (this != default_instance_) {
  }
}

void ZmqPBExampleWorkerResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZmqPBExampleWorkerResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZmqPBExampleWorkerResponse_descriptor_;
}

const ZmqPBExampleWorkerResponse& ZmqPBExampleWorkerResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_zmqpbexample_2eproto();  return *default_instance_;
}

ZmqPBExampleWorkerResponse* ZmqPBExampleWorkerResponse::default_instance_ = NULL;

ZmqPBExampleWorkerResponse* ZmqPBExampleWorkerResponse::New() const {
  return new ZmqPBExampleWorkerResponse;
}

void ZmqPBExampleWorkerResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_string_out()) {
      if (string_out_ != &::google::protobuf::internal::kEmptyString) {
        string_out_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZmqPBExampleWorkerResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string string_out = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string_out()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->string_out().data(), this->string_out().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ZmqPBExampleWorkerResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string string_out = 1;
  if (has_string_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_out().data(), this->string_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->string_out(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ZmqPBExampleWorkerResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string string_out = 1;
  if (has_string_out()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->string_out().data(), this->string_out().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->string_out(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ZmqPBExampleWorkerResponse::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string string_out = 1;
    if (has_string_out()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string_out());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZmqPBExampleWorkerResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZmqPBExampleWorkerResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZmqPBExampleWorkerResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZmqPBExampleWorkerResponse::MergeFrom(const ZmqPBExampleWorkerResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_string_out()) {
      set_string_out(from.string_out());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZmqPBExampleWorkerResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZmqPBExampleWorkerResponse::CopyFrom(const ZmqPBExampleWorkerResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZmqPBExampleWorkerResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void ZmqPBExampleWorkerResponse::Swap(ZmqPBExampleWorkerResponse* other) {
  if (other != this) {
    std::swap(string_out_, other->string_out_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZmqPBExampleWorkerResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZmqPBExampleWorkerResponse_descriptor_;
  metadata.reflection = ZmqPBExampleWorkerResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
